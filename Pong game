import simplegui
import random

width=600
height=400

pad_width=8
pad_height=80
half_pad_width = pad_width/2
half_pad_height= pad_height/2
ball_pos= [width / 2, height /2]
ball_rad= 20
pad1_pos = height / 2
pad2_pos = height / 2
pad1_vel=0.0
pad2_vel=0.0
ball_vel=[1,-1]
score1=0
score2=0
RIGHT= True
LEFT= False


def draw(canvas):
    global pad1_pos, pad2_pos, ball_pos, ball_vel, ball_rad, score1, score2
   # draw lines
    canvas.draw_line([width / 2, 0],[width / 2, height], 1, "White")
    canvas.draw_line([pad_width, 0],[pad_width,height], 1, "White")
    canvas.draw_line([width - pad_width, 0],[width - pad_width, height], 1, "White")
    
    
    # draw left paddle
    canvas.draw_line([half_pad_width, pad1_pos - half_pad_height], [half_pad_width, pad1_pos + half_pad_height], pad_width, 'Blue')
    
    # draw right paddle
    canvas.draw_line([width-half_pad_width, pad2_pos - half_pad_height],[width-half_pad_width, pad2_pos + half_pad_height] ,pad_width, 'Blue')
    
    # draw ball
    canvas.draw_circle(ball_pos, ball_rad, 2, "Blue", "White")
    
    # update ball
    
    ball_pos[0] = ball_pos[0] + ball_vel[0]                                    
    ball_pos[1] = ball_pos[1] + ball_vel[1] 
    if ball_pos[1] + ball_rad >= height:                         #bounces ball off upper side
        ball_vel[1] = ball_vel[1] * -1
    elif ball_pos[1] <= ball_rad:                                #bounces ball off lower side
        ball_vel[1] = ball_vel[1] * -1   
    
    
    # update left paddle's vertical position
    
    if(pad1_vel+pad1_pos) < half_pad_height:
        pad1_pos= half_pad_height
       
    elif (pad1_pos + pad1_vel) > height- half_pad_height:
        pad1_pos= height-half_pad_height
    
    
    nervous_factor = 50  

    if pad1_pos <   ball_pos[1]:  #if paddle1 is above ball
          pad1_pos =  pad1_pos + ((pad1_pos + ball_pos[1])/ nervous_factor)  #paddle1 moves down
        
    if pad1_pos ==   ball_pos[1]:  #if paddle1 is even with ball
          pad1_pos =  pad1_pos  #paddle1 stays put                                       
        
    if pad1_pos >   ball_pos[1]:  #if paddle1 is below ball
          pad1_pos =  pad1_pos - ((pad1_pos + ball_pos[1])/ nervous_factor) #padlle1 moves up 
           
       
    
    # update right paddle's vertical position, keep paddle on the screen
    
    if (pad2_pos + pad2_vel) < half_pad_height:                 #limits paddle2 from going too high
        pad2_pos = half_pad_height
    elif (pad2_pos + pad2_vel) > height - half_pad_height:      #limits paddle2 from going too low 
        pad2_pos = height - half_pad_height
    else: pad2_pos = pad2_pos + pad2_vel                     #increments paddle2 coordinate
    
# determine whether left paddle and ball collide                          
    if ball_pos[0] - ball_rad <= pad_width:       #if ball reaches left side goal
        if (ball_pos[1] >= pad1_pos - half_pad_height) and (ball_pos[1] <= pad1_pos + half_pad_height):
            ball_vel[0] = ball_vel[0] * -1.1         #if ball hits paddle it bounces and goes 10% faster                
        else:
            score2 = score2 + 1                      #else ball goes in gutter, up right score, and spawn new ball
            spawn_ball(RIGHT)
           
       
    # determine whether right paddle and ball collide     
    
    elif ball_pos[0] + ball_rad >= width - pad_width:   #if ball reaches right side goal
        if (ball_pos[1] >= pad2_pos - half_pad_height) and (ball_pos[1] <= pad2_pos + half_pad_height):
            ball_vel[0] = ball_vel[0] * -1.1         #if ball hits paddle it bounces and goes 10% faster
        else:
            score1 = score1 + 1                      # else ball goes in gutter, up left score, and spawn new ball  
            spawn_ball(LEFT)
      
    # score board
    canvas.draw_text (str(score1), (200, 50), 50, 'pink')
    canvas.draw_text (str(score2), (365, 50), 50, 'pink')
    
    
def new_game():
    global pad1_pos, pad2_pos, pad1_vel, pad2_vel 
    global score1, score2  # these are ints
    global direction
    pad1_pos = height / 2
    pad2_pos = height / 2
    score1 = 0
    score2 = 0
    direction = random.choice([LEFT, RIGHT])     #randomly chooses direction to be used by spawn_ball function
    spawn_ball(direction)
    
def spawn_ball(direction):
    global ball_pos, ball_vel
    horz = (random.randrange(120, 240)) / 60        #generates a random number to multiply bal_vel[0] by
    vert = (random.randrange(60, 180)) / 60         #generates a random number to multiply bal_vel[1] by
    if direction == RIGHT:
        ball_pos = [width / 2, height /2]           #sets coordinates and velocity to spawn ball right and up
        ball_vel = [1 * horz, -1 * vert]
    else:
        ball_pos = [width / 2, height /2]           #sets coordinates and velocity to spawn ball left and up
        ball_vel = [-1 * horz, -1 * vert]              
    
    
def keydown(key):
    global pad1_vel, pad2_vel
    if key == simplegui.KEY_MAP["down"]:
          pad2_vel= 5   
    elif key == simplegui.KEY_MAP["up"]:
          pad2_vel= -5
       
#    if key == simplegui.KEY_MAP["w"]:
#        pad1_vel = -5
#    if key == simplegui.KEY_MAP["s"]:
#        pad1_vel = 5
        
def keyup(key):
    global pad1_vel, pad2_vel
    if key == simplegui.KEY_MAP["up"]:
        pad2_vel = 0
    if key == simplegui.KEY_MAP["down"]:             #turns off user inputs for controlling paddles
        pad2_vel = 0
#    if key == simplegui.KEY_MAP["w"]:
#        pad1_vel = 0
#    if key == simplegui.KEY_MAP["s"]:
#        pad1_vel = 0



frame= simplegui.create_frame("Pong start", width,height)
frame.set_draw_handler(draw)
frame.set_keydown_handler(keydown)
frame.set_keyup_handler(keyup)
frame.add_button("Reset to start a new game.", new_game, 200)
frame.add_label('')
frame.add_label('Computer will control the left paddle')
frame.add_label('')
frame.add_label('Use "up arrow" and "down arrow" keys to control right paddle.')
frame.add_label('')
frame.add_label('You can change the nervous factor of the computer by changing line 60 of the program.')


frame.start()
new_game()
